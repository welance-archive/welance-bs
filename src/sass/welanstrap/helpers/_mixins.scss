// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1600px)
//
// The map defined in the `$mq-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1600px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $mq-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1600px))
//    576px
@function breakpoint-min($name, $breakpoints: $mq-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name, $breakpoints: $mq-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1600px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1600px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $mq-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

@function bp($name, $breakpoints: $mq-breakpoints) {
    @if map-has-key($breakpoints, $name) {
        @return map-get($breakpoints, $name);
  }
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $mq-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @include mq($from: $min){
    //@media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $mq-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @include mq($until: $max){
    //@media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $mq-breakpoints) {
  @include media-breakpoint-up($lower, $breakpoints) {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $mq-breakpoints) {
  @include media-breakpoint-between($name, $name, $breakpoints) {
    @content;
  }
}


// Flexible Cover Images
// http://nicolasgallagher.com/flexible-css-cover-images
//
// $btm-padding: [ratio percentage]
// For Example: 16:9 (16/9 = .5625 || 56.25%)
// $btm-padding: 56.25%

@mixin flexembed-image($btm-padding, $bg-image, $min-width: 80px, $min-height: null, $max-width: 1200px, $max-height: 1200px) {
  display: block;
  overflow: hidden;
  position: relative;

  margin: 0 auto;

  min-height: #{$min-height};
  min-width: #{$min-width};
  max-height: #{$max-height};
  max-width: #{$max-width};


  @if($bg-image){
    background-image: $bg-image;
  }
  background-position: 50%;
  background-repeat: no-repeat;
  background-size: cover;

  &:before {
      content: "";
      display: block;
      padding-bottom: $btm-padding;
      width: 100%;
  }
}

@mixin im-columns($columns...) {
  @each $i in $columns {
    @for $n from 1 through $i {
      #{$im-columns-class}--#{$n}-#{$i} {
        width: ($n / $i) * 100%;
      }
    }
  }

  @each $breakpoint in $mq-breakpoints {
    $breakpoint-name: nth($breakpoint, 1);

    @include mq($from: $breakpoint-name){
      .hide\@#{$breakpoint-name} {
        display: none;
      }
      .show-flex\@#{$breakpoint-name} {
        display: flex;
      }
      .show-block\@#{$breakpoint-name}, .show\@#{$breakpoint-name} {
        display: block;
      }
      @each $i in $columns {
        #{$im-columns-class}--offset-0-#{$i}\@#{$breakpoint-name} {
          margin-left: 0;
        }
        @for $n from 1 through $i {
          #{$im-columns-class}--#{$n}-#{$i}\@#{$breakpoint-name} {
            width: ($n / $i) * 100%;
          }
          #{$im-columns-class}--offset-#{$n}-#{$i}\@#{$breakpoint-name} {
            margin-left: ($n / $i) * 100%;
          }
        }
      }
    }
  }
}


@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .ratio-content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}


//SPACING MIXINS
@mixin m($t : 1, $r: null, $b: null, $l: null) {
  @if ($t and $r and $b and $l) {

    @include mt($t);
    @include mr($r);
    @include mb($b);
    @include ml($l);

  } @else if ($t and $r and $b and not $l) {

    @include mt($t);
    @include mx($r);
    @include mb($b);

  } @else if ($t and $r and not $b and not $l) {

    @include my($t);
    @include mx($r);

  } @else if ($t and not $r and not $b and not $l) {

    @if ($t == 'auto') {
      @include my(0); //be explicit about what the browser does
      @include mx(auto);
    } @else {
      @include my($t);
      @include mx($t);
    }

  } @else {
    @error "m(#{$t}, #{$r}, #{$b}, #{$l}): Invalid parameters. Expects m($size), m($y, $x), m($t, $x, $b) or m($t, $r, $b, $l)"
  }
}
@mixin mx($r : 1, $l : null) {
  @if ($r and $l) {
    @include mr($r);
    @include ml($l);
  } @else if ($r and not $l) {
    @include mr($r);
    @include ml($r);
  } @else {
    @error "mx(#{$r}, #{$l}): Invalid parameters. Expects mx($size) or mx($r, $l)"
  }
}
@mixin my($t : 1, $b : null) {
  @if ($t and $b) {
    @include mt($t);
    @include mb($b);
  } @else if ($t and not $b) {
    @include mt($t);
    @include mb($t);
  } @else {
    @error "my(#{$t}, #{$b}): Invalid parameters. Expects my($size) or my($t, $b)"
  }
}
@mixin ml($size : 1) {
  @if ($size == 'auto') {
    margin-left: auto #{if($spacing-important, '!important', '')};
  } @else {
    margin-left: map-get($spacing-sizes, $size) #{if($spacing-important, '!important', '')};
  }
}
@mixin mt($size : 1) {
  margin-top: map-get($spacing-sizes, $size) #{if($spacing-important, '!important', '')};
}
@mixin mr($size : 1) {
  @if ($size == 'auto') {
    margin-right: auto #{if($spacing-important, '!important', '')};
  } @else {
    margin-right: map-get($spacing-sizes, $size) #{if($spacing-important, '!important', '')};
  }
}
@mixin mb($size : 1) {
  margin-bottom: map-get($spacing-sizes, $size) #{if($spacing-important, '!important', '')};
}
@mixin p($t : 1, $r: null, $b: null, $l: null) {
  @if ($t and $r and $b and $l) {
    @include pt($t);
    @include pr($r);
    @include pb($b);
    @include pl($l);
  } @else if ($t and $r and $b and not $l) {
    @include pt($t);
    @include px($r);
    @include pb($b);
  } @else if ($t and $r and not $b and not $l) {
    @include py($t);
    @include px($r);
  } @else if ($t and not $r and not $b and not $l) {
    @include py($t);
    @include px($t);
  } @else {
    @error "p(#{$t}, #{$r}, #{$b}, #{$l}): Invalid parameters. Expects p($size), p($y, $x), p($t, $x, $b) or p($t, $r, $b, $l)"
  }
}
@mixin px($r : 1, $l : null) {
  @if ($r and $l) {
    @include pr($r);
    @include pl($l);
  } @else if ($r and not $l) {
    @include pr($r);
    @include pl($r);
  } @else {
    @error "px(#{$r}, #{$l}): Invalid parameters. Expects px($size) or px($r, $l)"
  }
}
@mixin py($t : 1, $b : null) {
  @if ($t and $b) {
    @include pt($t);
    @include pb($b);
  } @else if ($t and not $b) {
    @include pt($t);
    @include pb($t);
  } @else {
    @error "py(#{$t}, #{$b}): Invalid parameters. Expects py($size) or py($t, $b)"
  }
}
@mixin pl($size : 1) {
  padding-left: map-get($spacing-sizes, $size) #{if($spacing-important, '!important', '')};
}
@mixin pt($size : 1) {
  padding-top: map-get($spacing-sizes, $size) #{if($spacing-important, '!important', '')};
}
@mixin pr($size : 1) {
  padding-right: map-get($spacing-sizes, $size) #{if($spacing-important, '!important', '')};
}
@mixin pb($size : 1) {
  padding-bottom: map-get($spacing-sizes, $size) #{if($spacing-important, '!important', '')};
}

// END SPACING MIXINS
